name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
        type: string
      skip_build:
        description: 'Skip Docker build'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ap-south-1

permissions:
  id-token: write
  contents: read

jobs:
  build_and_push:
    runs-on: self-hosted
    outputs:
      patient_image_uri: ${{ steps.terraform-output.outputs.patient_ecr_url }}:${{ github.event.inputs.image_tag || 'latest' }}
      appointment_image_uri: ${{ steps.terraform-output.outputs.appointment_ecr_url }}:${{ github.event.inputs.image_tag || 'latest' }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init and Select Workspace
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          terraform init
          if ! terraform workspace list | grep -w "$ENV"; then
            terraform workspace new "$ENV"
          fi
          terraform workspace select "$ENV"

      - name: Get ECR URLs
        id: terraform-output
        run: |
          echo "patient_ecr_url=$(terraform output -raw patitent_repository_url)" >> $GITHUB_OUTPUT
          echo "appointment_ecr_url=$(terraform output -raw appointment_repository_url)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ env.AWS_REGION }}
          
      - name: Build and Push Images
        if: ${{ !github.event.inputs.skip_build }}
        run: |
          TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          
          # Always build if directory exists and we're not skipping builds
          if [ -d "app/patient-service" ]; then
            echo "Building patient-service..."
            docker build -t ${{ steps.terraform-output.outputs.patient_ecr_url }}:$TAG \
              -f app/patient-service/Dockerfile app/patient-service
            docker push ${{ steps.terraform-output.outputs.patient_ecr_url }}:$TAG
          fi
          
          if [ -d "app/appointment-service" ]; then
            echo "Building appointment-service..."
            docker build -t ${{ steps.terraform-output.outputs.appointment_ecr_url }}:$TAG \
              -f app/appointment-service/Dockerfile app/appointment-service
            docker push ${{ steps.terraform-output.outputs.appointment_ecr_url }}:$TAG
          fi

  deploy_infrastructure:
    runs-on: self-hosted
    needs: build_and_push
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize and Select Workspace
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          terraform init
          terraform workspace select "$ENV" || terraform workspace new "$ENV"

      - name: Terraform Plan
        run: |
          env="${{ github.event.inputs.environment || 'dev' }}"
          terraform plan \
            -var="environment=$env" \
            -var="patient_image_uri=${{ needs.build_and_push.outputs.patient_image_uri }}" \
            -var="appointment_image_uri=${{ needs.build_and_push.outputs.appointment_image_uri }}" \
            -var-file="./environments/$env/$env.tfvars" \
            -out=tfplan

      - name: Terraform Apply
        if: github.event_name != 'pull_request'
        run: terraform apply -auto-approve tfplan
