name: Build and Deploy App

on:
  push:
    branches: [main]
    paths:
      - 'app/patient-service/**'
      - 'app/appointment-service/**'
  pull_request:
    branches: [main]
    paths:
      - 'app/patient-service/**'
      - 'app/appointment-service/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: write     
  pull-requests: write

env:
  AWS_REGION: ap-south-1

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      patient-service: ${{ steps.changes.outputs.patient-service }}
      appointment-service: ${{ steps.changes.outputs.appointment-service }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ðŸ‘ˆ fetch full commit history

      - name: Detect Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            patient-service:
              - 'app/patient-service/**'
            appointment-service:
              - 'app/appointment-service/**'


      - name: Set Outputs
        id: set
        run: |
          echo "patient-service=${{ steps.changes.outputs.patient-service }}" >> "$GITHUB_OUTPUT"
          echo "appointment-service=${{ steps.changes.outputs.appointment-service }}" >> "$GITHUB_OUTPUT"

  build-patient-service:
    name: Build Patient Service
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.patient-service == 'true'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        working-directory: app/patient-service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: demo-ecs-patitent
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-appointment-service:
    name: Build Appointment Service
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.appointment-service == 'true'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        working-directory: app/appointment-service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: demo-ecs-appointment
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [build-patient-service, build-appointment-service]
    if: always() && (needs.build-patient-service.result == 'success' || needs.build-appointment-service.result == 'success') && github.ref == 'refs/heads/main'
    
    environment:
      name: dev
    
    steps:
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Patient Service
        if: needs.build-patient-service.result == 'success'
        run: |
          aws ecs update-service \
            --cluster demo-ecs-cluster \
            --service patient-service \
            --force-new-deployment

      - name: Update Appointment Service
        if: needs.build-appointment-service.result == 'success'
        run: |
          aws ecs update-service \
            --cluster demo-ecs-cluster \
            --service appointment-service \
            --force-new-deployment

      - name: Wait for services to stabilize
        run: |
          if [[ "${{ needs.build-patient-service.result }}" == "success" ]]; then
            aws ecs wait services-stable \
              --cluster demo-ecs-cluster \
              --services patient-service
          fi
          
          if [[ "${{ needs.build-appointment-service.result }}" == "success" ]]; then
            aws ecs wait services-stable \
              --cluster demo-ecs-cluster \
              --services appointment-servic
          fi
 
  deploy_infrastructure:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize and Select Workspace
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          terraform init
          terraform workspace select "$ENV" || terraform workspace new "$ENV"

      - name: Terraform Plan
        run: |
          env="${{ github.event.inputs.environment || 'dev' }}"
          terraform plan \
            -var="environment=$env" \
            -var-file="./environments/$env/$env.tfvars" \
            -out=tfplan

      - name: Terraform Apply
        if: github.event_name != 'pull_request'
        run: terraform apply -auto-approve tfplan
